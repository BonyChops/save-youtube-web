{"version":3,"sources":["firebaseConfig.js","firebase.js","components/Header/Header.js","components/Prompt/Prompt.js","components/ModalCollection/ModalCollection.js","App.js","reportWebVitals.js","index.js"],"names":["firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","signOut","setChannel","auth","Cookies","remove","Swal","fire","Header","props","className","role","id","href","user","onClick","data-target","Prompt","job","a","getVideo","vKey","video","setState","undefined","console","log","getCommentThreads","comments","sort","b","snippet","totalReplyCount","PromisePool","for","filter","v","k","process","comment","getComments","results","errors","replies","concat","apply","spamComments","spamLink","some","link","textOriginal","indexOf","reason","type","matched","find","push","spamRegex","regex","match","RegExp","urlPattern","trim","videoId","returnId","channelId","state","channelTitle","title","length","likeCount","map","selected","highSpam","includes","lowSpam","flagJob","token","get","YT_TOKEN","window","alert","provider","GoogleAuthProvider","addScope","signInWithPopup","then","result","credential","accessToken","set","secure","catch","error","getOwnChannel","icon","html","thumbnails","default","url","showCancelButton","preConfirm","markAsSpam","isConfirmed","setVideoId","setTmpVideoLink","e","ids","axios","post","join","headers","Authorization","params","part","mine","response","data","items","key","config","maxResults","nextPageToken","order","parentId","toggleTargetComment","commentFromList","currentTarget","checked","checkAll","array","forEach","target","commentsToCards","commentArray","m","s","onChange","filledIn","actions","rel","reveal","closeIcon","revealIcon","textClassName","authorDisplayName","spam_link","spam_regex","long_but_no_likes","unrelated_video","includes_link","this","opts","alignLinks","brand","every","centerChildren","class","left","active","color","flashing","size","React","Component","ModalCollection","open","openConfirmDialog","header","bottomSheet","isMobile","fixedFooter","dismissible","onClose","setOpenConfirmDialog","waves","flat","src","width","App","useState","tmpVideoLink","setSpamLink","setSpamRegex","channel","useEffect","urlStr","URL","pathname","substr","searchParams","has","style","label","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10d4ea16.chunk.js","sourcesContent":["const firebaseConfig = {\n    apiKey: \"AIzaSyBlNaMAPdMTG1vb4IU5BdrnVHKgrLiR98w\",\n    authDomain: \"elevated-analog-323212.firebaseapp.com\",\n    projectId: \"elevated-analog-323212\",\n    storageBucket: \"elevated-analog-323212.appspot.com\",\n    messagingSenderId: \"975357008314\",\n    appId: \"1:975357008314:web:fd0d488ebc269063d4a583\",\n    measurementId: \"G-B964EVJJFG\"\n};\n\nexport default firebaseConfig;","import firebase from \"firebase\";\nimport firebaseConfig from \"./firebaseConfig\";\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import firebase from \"../../firebase\";\nimport Swal from \"sweetalert2\";\nimport Cookies from \"js-cookie\";\n\nconst signOut = (setChannel) => {\n    firebase.auth().signOut();\n    Cookies.remove(\"YT_TOKEN\");\n    Swal.fire(\"ログアウトしました\");\n    setChannel(false);\n}\n\nconst Header = (props) => {\n    return (\n        <nav className=\"light-blue lighten-1\" role=\"navigation\">\n            <div className=\"nav-wrapper container\"><a id=\"logo-container\" href=\"#\" className=\"brand-logo\">save-youtube</a>\n                <ul className=\"right hide-on-med-and-down\">\n                    {props.user ? <li><a href=\"#\" onClick={() => signOut(props.setChannel)}>ログアウト</a></li> : null}\n                </ul>\n\n                <ul id=\"nav-mobile\" className=\"sidenav\">\n                    {props.user ? <li><a href=\"#\" onClick={() => signOut(props.setChannel)}>ログアウト</a></li> : null}\n                </ul>\n                <a href=\"#\" data-target=\"nav-mobile\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\n            </div>\n        </nav>\n    )\n}\nexport default Header","import React from \"react\";\nimport firebase from \"../../firebase\";\nimport config from \"../../firebaseConfig\";\nimport axios from \"axios\";\nimport YouTube from \"react-youtube\";\nimport PromisePool from \"@supercharge/promise-pool\";\nimport { Card, Checkbox, Col, Icon, Navbar, NavItem, Preloader, Row } from \"react-materialize\";\nimport Cookies from \"js-cookie\";\n//import { getModal } from \"../../tools\";\nimport Swal from \"sweetalert2\";\n\nclass Prompt extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            spamComments: false\n        }\n    }\n\n    componentDidMount() {\n        this.job();\n    }\n\n    job = async () => {\n        const video = await this.getVideo(this.props.vKey);\n        this.setState({ video });\n        if (video === undefined) {\n            return;\n        }\n        console.log(video)\n        const [comments] = await this.getCommentThreads(video.id);\n        comments.sort((a, b) => b.snippet.totalReplyCount - a.snippet.totalReplyCount);\n        const { results, errors } = await PromisePool\n            .for(comments.filter((v, k) => k < 20 && v.snippet.totalReplyCount > 0))\n            .process(async comment => {\n                const [comments] = await this.getComments(comment.id);\n                return comments;\n            })\n        const replies = [].concat.apply([], results);\n        const spamComments = [];\n        for (const comment of replies) {\n            if (this.props.spamLink.some(link => comment.snippet.textOriginal.indexOf(link) !== -1)) {\n                comment.reason = {\n                    type: \"spam_link\",\n                    matched: this.props.spamLink.find(link => comment.snippet.textOriginal.indexOf(link) !== -1)\n                }\n                spamComments.push(comment);\n                continue;\n            }\n            if (this.props.spamRegex.some(regex => comment.snippet.textOriginal.match(new RegExp(regex)) !== null)) {\n                comment.reason = {\n                    type: \"spam_regex\",\n                    matched: this.props.spamRegex.find(regex => comment.snippet.textOriginal.match(new RegExp(regex)) !== null)\n                }\n                spamComments.push(comment);\n                continue;\n            }\n            const urlPattern = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/;\n            if (comment.snippet.textOriginal.match(urlPattern) !== null) {\n                console.log(comment.snippet.textOriginal.match(urlPattern))\n                console.log(comment.snippet.textOriginal.match(urlPattern)[0].trim())\n                const videoId = this.props.returnId(comment.snippet.textOriginal.match(urlPattern)[0].trim());\n                if (videoId) {\n                    const video = await this.getVideo(videoId);\n                    if (video && video.snippet.channelId !== this.state.video.snippet.channelId) {\n                        console.log(video.snippet.channelId);\n                        console.log(this.state.video.snippet.channelId);\n                        comment.reason = {\n                            type: \"unrelated_video\",\n                            matched: `${video.snippet.channelTitle}: ${video.snippet.title}`\n                        }\n                        spamComments.push(comment);\n                        continue;\n                    }\n                } else {\n                    comment.reason = {\n                        type: \"includes_link\",\n                        matched: comment.snippet.textOriginal.match(urlPattern)[0].trim()\n                    }\n                    spamComments.push(comment);\n                    continue;\n                }\n            }\n            if (comment.snippet.textOriginal.length >= 100 && comment.snippet.likeCount < 10) {\n                comment.reason = {\n                    type: \"long_but_no_likes\",\n                    matched: `高評価: ${comment.snippet.likeCount} 字数:${comment.snippet.textOriginal.length}`\n                }\n                spamComments.push(comment);\n                continue;\n            }\n        }\n\n        console.log(spamComments);\n        this.setState({ spamComments: spamComments.map(comment => ((comment.selected = this.highSpam.includes(comment.reason.type)), comment)) });\n    }\n\n    lowSpam = [\"long_but_no_likes\", \"unrelated_video\"];\n    highSpam = [\"spam_link\", \"span_regex\"];\n\n    render() {\n        return (\n            <div>\n                {this.state.video ? <div>\n                    <div className=\"center\">\n                        <YouTube videoId={this.state.video?.id} opts={{\n                            //\n                        }} />\n                    </div>\n                    <br /><br />\n                    <div>\n                        {this.state.spamComments ? <div>\n                            <Navbar\n                                alignLinks=\"right\"\n                                brand={<span><Checkbox\n                                    filledIn\n                                    checked={\n                                        this.state.spamComments\n                                            .filter(comment => this.lowSpam.includes(comment.reason.type))\n                                            .every(comment => comment.selected)\n                                    }\n                                    onChange={(e) => this.checkAll(e, this.lowSpam)}\n                                />スパムの可能性 ({this.state.spamComments\n                                    .filter(comment => this.lowSpam.includes(comment.reason.type) && comment.selected).length}/{this.state.spamComments\n                                        .filter(comment => this.lowSpam.includes(comment.reason.type)).length})</span>}\n                                className=\"yellow darken-3\"\n                                centerChildren\n                            >\n                            </Navbar>\n                            <br /><br />\n                            <Row>\n                                {this.commentsToCards(this.state.spamComments.filter(comment => this.lowSpam.includes(comment.reason.type)))}\n                            </Row>\n                            <Navbar\n                                alignLinks=\"right\"\n                                brand={<span><Checkbox\n                                    filledIn\n                                    checked={\n                                        this.state.spamComments\n                                            .filter(comment => this.highSpam.includes(comment.reason.type))\n                                            .every(comment => comment.selected)\n                                    }\n                                    onChange={(e) => this.checkAll(e, this.highSpam)}\n                                /> スパムコメント({this.state.spamComments\n                                    .filter(comment => this.highSpam.includes(comment.reason.type) && comment.selected).length}/{this.state.spamComments\n                                        .filter(comment => this.highSpam.includes(comment.reason.type)).length})</span>}\n                                centerChildren\n                            >\n                            </Navbar>\n                            <br /><br />\n                            <Row>\n                                {this.commentsToCards(this.state.spamComments.filter(comment => this.highSpam.includes(comment.reason.type)))}\n                            </Row>\n                            <div class=\"center\">\n                                <button onClick={this.flagJob} id=\"flag-button\" className=\"btn-large waves-effect waves-light red\"><Icon left={true}>flag</Icon> 一括通報</button>\n                            </div>\n                            <br /><br />\n                        </div> : <div s={4} className=\"center\">\n                            コメントを読み込んでいます...<br /><br />\n                            <Preloader\n                                active\n                                color=\"blue\"\n                                flashing={false}\n                                size=\"big\"\n                            />\n                        </div>}\n                    </div>\n                </div> : <Col s={4} className=\"center\">\n                    動画を読み込んでいます...<br /><br />\n                    <Preloader\n                        active\n                        color=\"blue\"\n                        flashing={false}\n                        size=\"big\"\n                    />\n                </Col>}\n            </div>\n        );\n    }\n\n    flagJob = async () => {\n        const token = Cookies.get().YT_TOKEN;\n        if (token === undefined) {\n            window.alert(\"通報に用いるYouTubeアカウントでログインしてください．(現在Googleに申請中であるため，ログイン時に警告が表示されます．)\");\n            const provider = new firebase.auth.GoogleAuthProvider();\n            provider.addScope('https://www.googleapis.com/auth/youtube.force-ssl');\n            firebase.auth()\n                .signInWithPopup(provider)\n                .then((result) => {\n                    console.log(\"Logged in!\");\n                    /** @type {firebase.auth.OAuthCredential} */\n                    const credential = result.credential;\n\n                    const token = credential.accessToken;\n                    const user = result.user;\n                    Cookies.set('YT_TOKEN', token, { secure: true });\n                    this.flagJob();\n                }).catch((error) => {\n                    window.alert(\"エラーが発生しました...\");\n                    console.error(error);\n                });\n            return;\n        }\n        console.log(\"Checking access token...\");\n        let user;\n        try {\n            user = await this.getOwnChannel(token);\n        } catch (e) {\n            Cookies.remove(\"YT_TOKEN\");\n            this.flagJob();\n            return;\n        }\n        console.log(user);\n        this.props.setChannel(user);\n        Swal.fire({\n            title: \"コメントを通報\",\n            icon: \"warning\",\n            html: `<p><img class=\"circle\" src=\"${user.snippet.thumbnails.default.url}\" width=\"30px\" /> ${user.snippet.title}として${this.state.spamComments.filter(comment => comment.selected).length}件のコメントを通報します．よろしいですか？</p>`,\n            showCancelButton: true,\n            preConfirm: () => this.markAsSpam(this.state.spamComments.filter(comment => comment.selected).map(comment => comment.id), Cookies.get(\"YT_TOKEN\"))\n        }).then((result) => {\n            if (result.isConfirmed) {\n                Swal.fire({\n                    title: `通報しました`,\n                    html: \"<p>これでまた一つのコメント欄の治安があなたによって救われました...ありがとうございます！</p>\",\n                    icon: \"success\"\n                });\n                this.props.setVideoId(false);\n                this.props.setTmpVideoLink(\"\");\n            }\n        }).catch(e => {\n            Swal.fire({\n                title: `エラー`,\n                html: \"<p>詳細はログを確認してください．</p>\",\n                icon: \"error\"\n            });\n        })\n    }\n\n    markAsSpam = async (ids, token) => {\n        const response = await axios.post(\"https://www.googleapis.com/youtube/v3/comments/markAsSpam\", {\n            id: ids.join(\",\")\n        }, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n        return;\n    }\n\n    getOwnChannel = async (token) => {\n        const response = await axios.get(\"https://www.googleapis.com/youtube/v3/channels\", {\n            params: {\n                part: \"snippet\",\n                mine: true\n            },\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        });\n        return response.data.items[0];\n    }\n\n    getVideo = async (id) => {\n        const response = await axios.get(\"https://www.googleapis.com/youtube/v3/videos\", {\n            params: {\n                part: \"snippet\",\n                id,\n                key: config.apiKey\n            }\n        });\n        return response.data.items[0];\n    }\n\n    getCommentThreads = async (id, maxResults = 100, nextPageToken = undefined) => {\n        const response = await axios.get(\"https://www.googleapis.com/youtube/v3/commentThreads\", {\n            params: {\n                part: \"snippet\",\n                videoId: id,\n                key: config.apiKey,\n                nextPageToken,\n                order: \"relevance\",\n                maxResults\n            }\n        });\n        return [response.data.items, response.nextPageToken];\n    }\n    getComments = async (parentId, maxResults = 100, nextPageToken = undefined) => {\n        const response = await axios.get(\"https://www.googleapis.com/youtube/v3/comments\", {\n            params: {\n                part: \"snippet\",\n                parentId,\n                key: config.apiKey,\n                nextPageToken,\n                maxResults\n            }\n        });\n        return [response.data.items, response.nextPageToken];\n    }\n\n    toggleTargetComment = (e, id) => {\n        const spamComments = this.state.spamComments;\n        console.log(this.state.spamComments.find(commentFromList => commentFromList.id === id).selected)\n        spamComments.find(commentFromList => commentFromList.id === id).selected = e.currentTarget.checked;\n        this.setState({ spamComments });\n    }\n\n    checkAll = (e, array) => {\n        const spamComments = this.state.spamComments;\n        const checked = e.currentTarget.checked;\n        console.log(checked);\n        array.forEach(target => { spamComments.filter(comment => comment.reason.type === target).forEach(comment => { comment.selected = checked }) });\n        this.setState({ spamComments });\n    }\n\n    commentsToCards = (commentArray) => {\n        return commentArray.map(comment => <Col m={6}>\n            <Col s={2}>\n                <Checkbox checked={this.state.spamComments.find(commentFromList => commentFromList.id === comment.id).selected} onChange={(e) => this.toggleTargetComment(e, comment.id)} filledIn />\n            </Col>\n            <Col s={10}>\n                <Card\n                    actions={[\n                        <button key=\"1\" className=\"activator orange-text btn-flat\">コメントの内容を見る</button>,\n                        <a key=\"2\" target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.youtube.com/watch?v=${this.props.vKey}&lc=${comment.id}`}>コメントのリンク</a>\n                    ]}\n                    className=\"blue-grey darken-1 truncate\"\n                    reveal={<p>{comment.snippet.textOriginal}</p>}\n                    closeIcon={<Icon>close</Icon>}\n                    revealIcon={<Icon>more_vert</Icon>}\n                    textClassName=\"white-text\"\n                    title={comment.snippet.authorDisplayName}\n                >\n                    {{\n                        spam_link: \"危険なリンクが含まれています\",\n                        spam_regex: \"スパムパターンが含まれています\",\n                        long_but_no_likes: \"文の長さと高評価の数より，スパムの可能性\",\n                        unrelated_video: \"関係のない動画のリンクが貼り付けられている可能性があります\",\n                        includes_link: \"外部リンクが貼り付けられています\"\n                    }[comment.reason.type]\n                    }:<br /> {comment.reason.matched}\n                </Card>\n            </Col>\n        </Col>)\n    }\n}\n\nexport default Prompt;\n","import { isMobile } from \"react-device-detect\";\nimport M from '@materializecss/materialize';\nimport { Button, Icon, Modal, Row, TextInput } from \"react-materialize\";\n\nconst ModalCollection = (props) => {\n    console.log(props)\n    return (\n        <Modal\n            id='confirmToFlag'\n            open={props.openConfirmDialog}\n            header='コメントを通報'\n            bottomSheet={isMobile}\n            fixedFooter={isMobile}\n            dismissible={false}\n            onClose={() => props.setOpenConfirmDialog(false)}\n            actions={[\n                <Button waves=\"light\" className=\"orange\" onClick={() => {\n                    //\n                }}><Icon left>link</Icon>IDからインポート</Button>,\n                <Button flat waves=\"light\" onClick={() => props.setOpenConfirmDialog(false)}>閉じる</Button>\n            ]}\n            bottomSheet={isMobile}>\n            <p><img class=\"circle\" src={props.user?.snippet?.thumbnails?.default?.url} width=\"30px\" /> {props.user?.snippet?.title}としてコメントを通報します．よろしいですか？</p>\n        </Modal>\n    )\n}\n\nexport default ModalCollection;","import '@materializecss/materialize';\n//import 'materialize-css';\nimport { Button, Card, Row, Col, Container, Section, TextInput, Icon } from 'react-materialize';\nimport Header from './components/Header/Header';\nimport Footer from \"./components/Footer/Footer\";\nimport Prompt from './components/Prompt/Prompt';\nimport axios from \"axios\";\nimport { useEffect, useState } from 'react';\nimport ModalCollection from './components/ModalCollection/ModalCollection';\n\nfunction App() {\n  const spamLinkListUrl = \"https://gist.githubusercontent.com/BonyChops/b3f623424754d946ca333e032a53b6e0/raw/spamLink.json\";\n  const spamRegexListUrl = \"https://gist.githubusercontent.com/BonyChops/b3f623424754d946ca333e032a53b6e0/raw/spamRegex.json\"\n  const [videoId, setVideoId] = useState(false);\n  const [error, setError] = useState(false)\n  const [tmpVideoLink, setTmpVideoLink] = useState(\"\");\n  const [spamLink, setSpamLink] = useState(false);\n  const [spamRegex, setSpamRegex] = useState(false);\n  const [channel, setChannel] = useState(false);\n  const [openConfirmDialog, setOpenConfirmDialog] = useState(false)\n  useEffect(() => {\n    axios.get(spamLinkListUrl).then((response) => {console.log(response.data); setSpamLink(response.data)});\n    axios.get(spamRegexListUrl).then((response) => {setSpamRegex(response.data)});\n  }, [])\n\n\n  const checkUrl = () => {\n    setVideoId(returnId(tmpVideoLink));\n  }\n\n  const returnId = (urlStr) => {\n    if (urlStr.match(/https:\\/\\/(.+)\\.youtube\\.com/) != null) {\n      const url = new URL(urlStr);\n      if (url.searchParams.has(\"v\")) {\n        return url.searchParams.get(\"v\");\n      }\n    } else if (urlStr.match(/https:\\/\\/youtu\\.be/) != null) {\n      const url = new URL(urlStr);\n      console.log(url)\n      return url.pathname.substr(1);\n    } else {\n      return false;\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Header user={channel} setChannel={setChannel}/>\n      <Section className=\"no-pad-bot\" id=\"index-banner\">\n        <Container>\n          <br /><br />\n          <h1 className=\"header center orange-text\">save-youtube</h1>\n          <div className=\"center\">\n            <h5 className=\"col s12 light\">YouTube世紀末コメントを一掃</h5><br />\n            <TextInput style={{width: \"100%\"}} className=\"col s12 light\" label=\"動画リンクを入力...\" value={tmpVideoLink} onChange={(e) => { setTmpVideoLink(e.target.value) }} />\n          </div>\n          <Row className=\"center\">\n            <button onClick={checkUrl} id=\"download-button\" className=\"btn-large waves-effect waves-light orange\"><Icon left={true}>assessment</Icon> 解析</button>\n          </Row>\n          <br /><br />\n        </Container>\n        <Container>\n          <div className=\"\">\n            {videoId && spamLink && spamRegex ? <Prompt key={videoId} vKey={videoId}\n            spamLink={spamLink} spamRegex={spamRegex} returnId={returnId}\n            setChannel={setChannel} setOpenConfirmDialog={setOpenConfirmDialog} setTmpVideoLink={setTmpVideoLink}\n            setVideoId={setVideoId}/> : null}\n          </div>\n        </Container>\n        <ModalCollection user={channel} openConfirmDialog={openConfirmDialog} setOpenConfirmDialog={setOpenConfirmDialog}/>\n      </Section>\n     {/*  <Footer /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}